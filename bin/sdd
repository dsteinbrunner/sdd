#!/usr/bin/env perl
=head1 NAME

sdd - Shutdown Daemon

=head1 SYNOPSIS

  sdd [-config <config file>] 


=head1 DESCRIPTION

Monitors varios system status and decides whether to shutdown the host or not.

=head1 OPTIONS

=over 4

=item --log_file <Str>

Log file path.
Default: /var/log/sdd.log

=item --startup_buffer <Int>

Number of seconds to sleep after starting before checking.
Default: 3600

=item --loop_sleep <Int>

Number of seconds to sleep between each check.
Default: 60

=item --config

Custom configuration.  Default in /etc/shutdown_manager.conf

=item --help or -h

Print a simple help message letting you know how to use get_sap_files
and then exit.
If you are reading this, --help will probably not help you much
further.

=item --verbose or -v

Be verbose - print log output to screen too.

=item --log_level [DEBUG|INFO|WARN|ERROR]

The log level to be used.
Default: INFO

=back

=head1 COPYRIGHT

Copyright 2011, Robin Clarke

=head1 AUTHOR

Robin Clarke <perl@robinclarke.net>

=cut

use strict;
use warnings;
use YAML::Any qw/Dump LoadFile/;
use Getopt::Long;
use Pod::Usage;
use Log::Log4perl;

my $cli_args = {};
my $result = GetOptions (
    "log_file=s"       => \$cli_args->{log_file},
    "log_level=s"      => \$cli_args->{log_level},
    "config=s"         => \$cli_args->{config},
    "startup_buffer=i" => \$cli_args->{startup_buffer},
    "loop_sleep=i"     => \$cli_args->{loop_sleep},
    "h|help"           => \$cli_args->{help},
    "show_config"      => \$cli_args->{show_config},
    "v|verbose"        => \$cli_args->{verbose},
    );

# If something invalid defined, show usage
if( ! $result ){
    pod2usage( {
        -verbose => 1,
        } );
}

# Show help if requested
if( $cli_args->{help} ){
    pod2usage( {
        -verbose => 2,
        } );
}

# Some sane defaults
my $default_args = {
    log_file       => '/var/log/sdd.log',
    config         => '/etc/sdd.conf',
    startup_buffer => 3600,
    loop_sleep     => 60,
    verbose        => 0,
    log_level      => 'INFO',
};


# Take CLI args if defined, otherwise the defaults
my $args = {};
foreach( keys( %{ $default_args } ) ){
    $args->{$_} = $cli_args->{$_} || $default_args->{$_};
}

if( $cli_args->{config} ){
    if( not -f $cli_args->{config} ){
        die( "Config file $cli_args->{config} not found" );
    }
    my $file_config = LoadFile( $cli_args->{config} );
    %$args = (
        %$args,
        %$file_config,
        );
}

# Dump the config
if( $cli_args->{show_config} ){
    print Dump( $args );
    exit;
}

# Set up the logging
my  $log4perl_conf = sprintf 'log4perl.rootLogger = %s, Logfile', $args->{log_level} || 'WARN';
if( $args->{verbose} > 0 ){
    $log4perl_conf .= q(, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr  = 0
log4perl.appender.Screen.layout   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = [%d] %p %m%n
    );

}

$log4perl_conf .= q(
log4perl.appender.Logfile          = Log::Log4perl::Appender::File
log4perl.appender.Logfile.layout   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Logfile.layout.ConversionPattern = [%d] %p %m%n
);
$log4perl_conf .= sprintf "log4perl.appender.Logfile.filename = %s\n", $args->{log_file};

# ... passed as a reference to init()
Log::Log4perl::init( \$log4perl_conf );
my $logger = Log::Log4perl->get_logger();

$logger->info( "Started" );

$logger->info( "Sleeping $args->{startup_buffer} seconds before starting monitoring" );

sleep( $args->{startup_buffer} );

while( 1 ){
    my $shutdown = 1;

    # This should be put into an external module, just testing here.
    foreach my $disk( @{ $args->{disks} } ){
        $logger->debug( "Testing $disk" );
        my $rtn = `hdparm -C $disk`;
        if( $rtn =~ m/drive state is:  active/s ){
            $logger->debug( "Disk is active: $disk" );
            $shutdown = 0;
        }
    }
    
    if( $shutdown ){
        $logger->info( "Shutting down" );
        if( $args->{test} ){
            $logger->info( "Not really shutting down because running in test mode" );
        }else{
            `shutdown -h now`;
            exit;
        }
    }
    $logger->debug( "Sleeping $args->{loop_sleep}" );
    sleep( $args->{loop_sleep} );
}


exit;
