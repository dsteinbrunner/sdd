#!/usr/bin/env perl
=head1 NAME

sdd - Shutdown Daemon

=head1 SYNOPSIS

  sdd [-config <config file>] 


=head1 DESCRIPTION

Monitors varios system status and decides whether to shutdown the host or not.

=head1 OPTIONS

=over 4

=item --log_file <Str>

Log file path.
Default: /var/log/sdd.log

=item --startup_buffer <Int>

Number of seconds to sleep after starting before checking.
Default: 3600

=item --loop_sleep <Int>

Number of seconds to sleep between each check.
Default: 60

=item --config

Custom configuration.  Default in /etc/shutdown_manager.conf

=item --help or -h

Print a simple help message letting you know how to use get_sap_files
and then exit.
If you are reading this, --help will probably not help you much
further.

=item --verbose or -v

Be verbose - print log output to screen too.

=item --log_level [DEBUG|INFO|WARN|ERROR]

The log level to be used.
Default: INFO

=back

=head1 COPYRIGHT

Copyright 2011, Robin Clarke

=head1 AUTHOR

Robin Clarke <perl@robinclarke.net>

=cut

use strict;
use warnings;
use YAML::Any;
use Getopt::Long;
use Pod::Usage;
use Log::Log4perl;

my $cli_args = {};
my $result = GetOptions (
    "log_file=s"       => \$cli_args->{log_file},
    "log_level=s"      => \$cli_args->{log_level},
    "startup_buffer=i" => \$cli_args->{startup_buffer},
    "loop_sleep=i"     => \$cli_args->{loop_sleep},
    "h|help"           => \$cli_args->{help},
    "show_config"      => \$cli_args->{show_config},
    "v|verbose"        => \$cli_args->{verbose},
    );

# If something invalid defined, show usage
if( ! $result ){
    pod2usage( {
        -verbose => 1,
        } );
}

# Show help if requested
if( $cli_args->{help} ){
    pod2usage( {
        -verbose => 2,
        } );
}

# Some sane defaults
my $default_args = {
    log_file       => '/var/log/shutdown_manager.log',
    startup_buffer => 3600,
    loop_sleep     => 60,
    verbose        => 0,
    log_level      => 'INFO',
};

# Take CLI args if defined, otherwise the defaults
my $args = {};
foreach( keys( %{ $default_args } ) ){
    $args->{$_} = $cli_args->{$_} || $default_args->{$_};
}

# Dump the config
if( $cli_args->{show_config} ){
    print Dump( $args );
    exit;
}

# Set up the logging
my  $log4perl_conf = sprintf 'log4perl.rootLogger = %s, Logfile', $args->{log_level};
if( $args->{verbose} > 0 ){
    $log4perl_conf .= q(, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr  = 0
log4perl.appender.Screen.layout   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = [%d] %p %m%n
    );

}

$log4perl_conf .= q(
log4perl.appender.Logfile          = Log::Log4perl::Appender::File
log4perl.appender.Logfile.layout   = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Logfile.layout.ConversionPattern = [%d] %p %m%n
);
$log4perl_conf .= sprintf "log4perl.appender.Logfile.filename = %s\n", $args->{log_file};

# ... passed as a reference to init()
Log::Log4perl::init( \$log4perl_conf );
my $logger = Log::Log4perl->get_logger();

$logger->info( "Started" );

__END__
LOOP:
while( 1 ){
    sleep( $sleep );
    if( uptime() < $uptime_offset ){
        &log( "Staying online because uptime is " . uptime() . "  (Allowed: $uptime_offset)\n" );
        next LOOP;
    }    

    # See if anyone is logged in
    my $users = `users`;
    chomp $users;
    if( $users =~ m/(root|wg|rcl)/ ){
        &log( "Staying online because a user is logged in ($users)\n" );
        next LOOP;
    }

    if( -f $file ){
        $diff_time = time() - stat($file)->mtime;
        print "DiffTime: $diff_time\n";
        if( $diff_time < $touch_offset ){
            &log( "Staying online because dif_time < touch_offset ($diff_time : $touch_offset)\n" );
            next LOOP;
        }
    }else{
        print "File does not exist...\n";
    }
    &shutdown();
}

exit;

sub log{
    my $message = shift;
    if( open( LOG, ">>$logfile" ) ){
        print LOG $message;
        close LOG;
    }else{
        print "Could not open Log: $!\n";
    }
}

sub shutdown{
    my $out;
    $out .= "Shutting down at " . localtime( time ) . "\n";
    $out .= "Uptime:\t" . uptime() . "\n";
    $out .= "DiffTime:\t" . $diff_time . "\n" if( $diff_time );
    $out .= "File does not exist\n" unless( -f $file );
    print $out;
    &log( $out );
    `shutdown -h now`;
}
